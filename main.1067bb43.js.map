{"version":3,"sources":["scripts/main.js"],"names":["BASE_URL","request","url","fetch","then","response","ok","setTimeout","Promise","reject","Error","status","json","getPhones","catch","error","alert","getPhonesDetails","ids","phonesDetails","map","element","detail","push","phones","list","document","createElement","goodsId","phonesWithDetails","goods","phone","li","id","innerHTML","name","appendChild","body"],"mappings":";AAAA,aA4CA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EA1CA,IAAMA,EAAW,mEAGXC,EAAU,SAACC,GACRC,OAAAA,MAASH,GAAAA,OAAAA,GAAWE,OAAAA,IACxBE,KAAK,SAACC,GASEA,OARFA,EAASC,IACZC,WAAW,WACFC,OAAAA,QAAQC,OACb,IAAIC,MAASL,GAAAA,OAAAA,EAASM,OADjB,qCAGN,KAGEN,EAASO,UAGhBC,EAAY,WACTZ,OAAAA,EAAQ,SACZa,MAAM,SAACC,GAAUR,OAAAA,WAAW,WAAMS,OAAAA,MAAMD,IAAQ,QAG/CE,EAAmB,SAACC,GAClBC,IAAAA,EAAgB,GAYfA,OAVPD,EAAIE,IAAI,SAAAC,GACNpB,EAAYoB,IAAAA,OAAAA,EAAZ,UACGjB,KAAK,SAACkB,GACLH,EAAcI,KAAUD,EAAAA,GAAAA,MAEzBR,MAAM,SAACC,GACNC,MAAMD,OAILI,GAEHK,EAASX,IACTY,EAAOC,SAASC,cAAc,MAC9BC,EAAU,GACVC,EAAoB,GAE1BL,EACGpB,KAAK,SAAC0B,GACLA,EAAMV,IAAI,SAAAW,GACFC,IAAAA,EAAKN,SAASC,cAAc,MAElCE,EAAkBN,KAAUQ,EAAAA,GAAAA,IAC5BH,EAAQL,KAAKQ,EAAME,IACnBD,EAAGE,UAAeH,GAAAA,OAAAA,EAAMI,MAExBV,EAAKW,YAAYJ,GACjBN,SAASW,KAAKD,YAAYX,KAG5BR,EAAiBW,KAElBd,MAAM,SAACC,GAAUR,OAAAA,WAAWC,QAAQC,OAAO,IAAIC,MAAMK,IAAS","file":"main.1067bb43.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst BASE_URL = 'https://mate-academy.github.io/'\n  + 'phone-catalogue-static/api/phones';\n\nconst request = (url) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then((response) => {\n      if (!response.ok) {\n        setTimeout(() => {\n          return Promise.reject(\n            new Error(`${response.status} - the endpoint does not exist`)\n          );\n        }, 5000);\n      }\n\n      return response.json();\n    });\n};\nconst getPhones = () => {\n  return request('.json')\n    .catch((error) => setTimeout(() => alert(error), 5000));\n};\n\nconst getPhonesDetails = (ids) => {\n  const phonesDetails = [];\n\n  ids.map(element => {\n    request(`/${element}.json`)\n      .then((detail) => {\n        phonesDetails.push({ ...detail });\n      })\n      .catch((error) => {\n        alert(error);\n      });\n  });\n\n  return phonesDetails;\n};\nconst phones = getPhones();\nconst list = document.createElement('ul');\nconst goodsId = [];\nconst phonesWithDetails = [];\n\nphones\n  .then((goods) => {\n    goods.map(phone => {\n      const li = document.createElement('li');\n\n      phonesWithDetails.push({ ...phone });\n      goodsId.push(phone.id);\n      li.innerHTML = `${phone.name}`;\n\n      list.appendChild(li);\n      document.body.appendChild(list);\n    });\n\n    getPhonesDetails(goodsId);\n  })\n  .catch((error) => setTimeout(Promise.reject(new Error(error)), 5000));\n"]}